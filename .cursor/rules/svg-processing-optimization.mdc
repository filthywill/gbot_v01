---
description: 
globs: */utils/*svg*,**/GraffitiDisplay/*
alwaysApply: false
---
# SVG Processing System Architecture

## 🎯 **CRITICAL UNDERSTANDING: Production vs Development Mode**

### **LOOKUP MODE: Production System (OPTIMIZE THIS)**
**What it is:** Pre-computed lookup tables used in production builds
**Location:** `src/data/generatedOverlapLookup.ts`
**Purpose:** Fast, consistent letter positioning in production
**Performance Impact:** Direct impact on user experience

```typescript
// PRODUCTION CODE - Optimize this:
const overlapValue = getOverlapValue(firstChar, secondChar, fallback);
// This runs for every letter pair in production
```

**Optimization Priority: HIGH** - This affects every user interaction.

### **RUNTIME MODE: Development Tool Only (DON'T OPTIMIZE)**
**What it is:** Pixel-based calculation for development and lookup generation
**Location:** `src/components/OverlapDebugPanel.tsx`
**Purpose:** Developer tool for fine-tuning and generating lookup tables
**Performance Impact:** None on production users

```typescript
// DEVELOPMENT CODE - Low optimization priority:
if (__DEV_SVG_PROCESSING__) {
  // This never runs in production builds
  const result = calculateOptimalOverlapFromPixels(prev, current);
}
```

**Optimization Priority: LOW** - Only affects development workflow.

---

## 🚨 **Before Optimizing SVG Code**

### Ask These Questions:
1. **Does this code run in production?** 
   - If it's behind `__DEV_SVG_PROCESSING__`, it's development-only
   - If it's behind `__PROD_LOOKUP_ONLY__`, it's production code

2. **Is this lookup table related?**
   - `getOverlapValue()`, `COMPLETE_OVERLAP_LOOKUP` = HIGH PRIORITY
   - `calculateOptimalOverlapFromPixels()` = LOW PRIORITY

3. **What's the code path?**
   - Lookup first → Rule fallback = PRODUCTION (optimize)
   - Pixel analysis → Canvas operations = DEVELOPMENT (low priority)

### Optimization Impact Matrix:

| Code Type | Production Impact | Optimization Priority |
|-----------|------------------|----------------------|
| Lookup table access | ✅ High | **CRITICAL** |
| Rule-based fallbacks | ✅ Medium | **HIGH** |
| SVG parsing/caching | ✅ High | **HIGH** |
| Pixel analysis | ❌ None | **LOW** |
| Canvas operations | ❌ None | **LOW** |
| Debug panels | ❌ None | **LOW** |

---

## 📁 **Key Files and Their Priority**

### **HIGH PRIORITY** (Production Impact):
```typescript
// Core production lookup system
src/data/generatedOverlapLookup.ts        // Lookup table data
src/utils/svgLookup.ts                     // Lookup access functions
src/hooks/useGraffitiGeneratorWithZustand.ts // Main processing pipeline

// SVG processing pipeline
src/utils/svgProcessing.ts                 // Conditional compilation entry
src/utils/svgUtils.ts                      // Core utilities with lookup integration
src/utils/svgCustomizationUtils.ts        // SVG styling utilities
```

### **LOW PRIORITY** (Development Only):
```typescript
// Development tools and runtime processing
src/components/OverlapDebugPanel.tsx       // Debug panel (dev only)
src/components/dev/SvgProcessingPanel.tsx  // Processing tools (dev only)
src/utils/dev/                             // All dev utility functions
```

---

## 🔧 **SVG Processing Pipeline**

### Production Pipeline (Optimize This):
```typescript
// 1. Try lookup table first (FAST)
const lookupValue = getOverlapValue(firstChar, secondChar);
if (lookupValue !== fallback) return lookupValue;

// 2. Fallback to rule-based calculation (MEDIUM)
const ruleValue = calculateRuleBasedOverlap(firstChar, secondChar);
return ruleValue;
```

### Development Pipeline (Low Priority):
```typescript
// Development-only runtime calculation
if (__DEV_SVG_PROCESSING__ && useRuntimeMode) {
  // Pixel analysis - only for generating lookup tables
  return calculateOptimalOverlapFromPixels(prev, current);
}
```

---

## 🎛️ **Build Flags and Conditional Compilation**

### Understanding the Build System:
```typescript
// vite.config.ts defines these flags
__DEV_SVG_PROCESSING__: isDev    // Enables development tools
__PROD_LOOKUP_ONLY__: !isDev     // Production optimization flag

// Usage in code:
if (__PROD_LOOKUP_ONLY__) {
  // Production-only code (OPTIMIZE THIS)
  return getProcessedSvgFromLookupTable(letter, style, variant);
}

if (__DEV_SVG_PROCESSING__) {
  // Development-only code (LOW PRIORITY)
  return await processSvg(svgContent, letter, resolution);
}
```

### Dead Code Elimination:
- Production builds automatically exclude `__DEV_SVG_PROCESSING__` code
- Development features are completely removed from production bundles
- No performance impact from development tools in production

---

## 📊 **Performance Guidelines**

### What to Measure:
- **Lookup table access time** (production)
- **Rule-based fallback speed** (production)
- **SVG caching effectiveness** (production)
- **Bundle size impact** (production)

### What NOT to Measure:
- Pixel analysis performance (development only)
- Debug panel responsiveness (development only)
- Runtime calculation speed (development only)
- Canvas operation efficiency (development only)

### Optimization Targets:
- Lookup table queries: Sub-millisecond
- Rule-based fallbacks: ~0.1ms
- SVG cache hit rate: >90%
- Bundle size: Minimal lookup table overhead

---

## 🛠️ **Development Workflow Understanding**

### When Developers Use RUNTIME MODE:
1. **Adding new letter artwork** - Generate lookup tables
2. **Fine-tuning letter spacing** - Test overlap values
3. **Creating overlap matrices** - Export to lookup file

### When Production Uses LOOKUP MODE:
1. **Every graffiti generation** - Fast letter positioning
2. **All user interactions** - Consistent performance
3. **Production deployments** - Optimized builds

### The Connection:
- RUNTIME MODE generates data for LOOKUP MODE
- LOOKUP MODE serves data to production users
- They're two parts of the same system, but only LOOKUP affects users

---

## 🎯 **Optimization Decision Tree**

```
Does this code run in production?
├── YES → What component?
│   ├── Lookup table access → CRITICAL PRIORITY
│   ├── Rule-based fallback → HIGH PRIORITY
│   ├── SVG caching → HIGH PRIORITY
│   └── Bundle impact → HIGH PRIORITY
└── NO (Development only) → LOW PRIORITY
    ├── Pixel analysis → Don't optimize unless blocking development
    ├── Debug panels → Don't optimize unless unusable
    └── Export tools → Don't optimize unless breaking workflow
```

---

## 📝 **Code Review Guidelines**

### Red Flags (High Priority Issues):
- Slow lookup table access patterns
- Missing cache implementations for production SVG processing
- Inefficient rule-based fallback calculations
- Large bundle size increases from lookup table data

### Yellow Flags (Consider, but lower priority):
- Slow pixel analysis in development tools
- Unresponsive debug panels
- Memory leaks in development-only code

### Green Flags (Good practices):
- Fast lookup table queries with proper fallbacks
- Efficient SVG caching strategies
- Clean separation between development and production code paths
- Minimal bundle impact from lookup table implementations

---

## 🧪 **Testing Priorities**

### Critical Tests (Production Impact):
```typescript
// Test lookup table performance
test('getOverlapValue should return quickly', () => {
  const start = performance.now();
  const result = getOverlapValue('a', 'b');
  const duration = performance.now() - start;
  expect(duration).toBeLessThan(1); // Sub-millisecond
});

// Test fallback behavior  
test('should fallback to rules when lookup missing', () => {
  const result = getOverlapValue('nonexistent', 'char', 0.15);
  expect(result).toBe(0.15); // Should use fallback
});
```

### Optional Tests (Development Tools):
```typescript
// Test development tools (nice to have, not critical)
test('pixel analysis should work in development', () => {
  if (__DEV_SVG_PROCESSING__) {
    // Test development functionality
  }
});
```

This architecture ensures optimal production performance while maintaining powerful development tools without confusion about optimization priorities.
